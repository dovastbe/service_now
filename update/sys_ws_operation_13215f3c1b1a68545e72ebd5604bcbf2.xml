<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ws_operation">
    <sys_ws_operation action="INSERT_OR_UPDATE">
        <active>true</active>
        <consumes>application/json,application/xml,text/xml</consumes>
        <consumes_customized>false</consumes_customized>
        <default_operation_uri/>
        <enforce_acl>cf9d01d3e73003009d6247e603f6a990</enforce_acl>
        <http_method>POST</http_method>
        <name>POST_NOTIFCATION</name>
        <operation_script><![CDATA[(function process(/*RESTAPIRequest*/ request, /*RESTAPIResponse*/ response) {

    // implement resource here
	var requestBody = request.body;
	
    var requestString = requestBody.dataString;
	gs.info('Incoming Anisble Tower API, request body is ' + requestString);
	
	// Parse the payload
	var notification = JSON.parse(requestString);	
	gs.info('Incoming Anisble Tower API, notication is ' + JSON.stringify(notification));
	
	// If we have a job ID, process it
	if (notification.id != undefined ) {

		// Parse out artifacts
		if (notification.artifacts != undefined ) {
			var artifacts_s = notification.artifacts;
			var artifacts_q = artifacts_s.replace(/'/g,'"');
			var artifacts = JSON.parse(artifacts_q);
			gs.info('Snow task is '+ artifacts.snow_task);

		}
		
		// Parse out extra vars
		var extra_vars = JSON.parse(notification.extra_vars);
 
		// Get ticket ref from extra vars 
		var ritm = extra_vars.ritm;
		var sctask = extra_vars.sctask;
		// TODO
		//var cr = extra_vars.cr;
		//var ctask = extra_vars.ctask;	
	
		var gr = new GlideRecord('x_ibmss_gts_oar_at_ansible_tower_notifcations');
		var url = notification.url.toString();
		gr.addQuery('tower_job_url', url);
		gr.query();
		if (gr.next()) {
			// Update record
			gs.info('Updating record the Ansible Tower Notifications table for ' + url);
			gr.tower_job_id = notification.id.toString();
			gr.tower_job_url = notification.url.toString();
			gr.tower_job_name = notification.name.toString();
			gr.tower_job_status = notification.status.toString();
			gr.tower_job_started = notification.started;
			gr.tower_job_finished  = notification.finished;
			gr.tower_job_created_by  = notification.created_by;
			gr.tower_job_inventory = notification.inventory;
			gr.tower_job_project  = notification.project;
			gr.tower_job_playbook  = notification.playbook;
			gr.tower_job_limit  = notification.limit;
			gr.tower_job_extra_vars = JSON.stringify(notification.extra_vars);
			//gr.tower_job_artifacts = JSON.stringify(notification.artifacts);
			gr.tower_job_hosts  = JSON.stringify(notification.hosts);
			gr.ritm = ritm;
			gr.sctask =  sctask;
			gr.update();
		} else {
			// Create a new record
			gr.initialize();
			gs.info('Creating new record the Ansible Tower Notifications table');
			gr.tower_job_id = notification.id.toString();
			gr.tower_job_url = notification.url.toString();
			gr.tower_job_name = notification.name.toString();
			gr.tower_job_status = notification.status.toString();
			gr.tower_job_started = notification.started;
			gr.tower_job_finished  = notification.finished;
			gr.tower_job_created_by  = notification.created_by;
			gr.tower_job_inventory = notification.inventory;
			gr.tower_job_project  = notification.project;
			gr.tower_job_playbook  = notification.playbook;
			gr.tower_job_limit  = notification.limit;
			gr.tower_job_extra_vars  = JSON.stringify(notification.extra_vars);
			gr.tower_job_hosts  = JSON.stringify(notification.hosts);
			gr.ritm = ritm;
			gr.sctask =  sctask;
			gr.insert();
		}	

		// Update the ticket to trigger a workflow refresh
		if ( ritm != undefined ) {
			gs.info('Incoming notification to API ' + ritm );
			var req_item = new GlideRecord('sc_req_item');
			req_item.addQuery('number',ritm);
			req_item.query();
			while (req_item.next()) {
				req_item.work_notes = requestString;
				req_item.update();
			}
		}
		if ( sctask != undefined ){
			gs.info('Incoming notification to API ' + sctask );
		}
	}
	return {"requestString": requestString};	
})(request, response);]]></operation_script>
        <operation_uri>/api/x_ibmss_gts_oar_at/ansible_tower_job_notifications</operation_uri>
        <produces>application/json,application/xml,text/xml</produces>
        <produces_customized>false</produces_customized>
        <relative_path>/</relative_path>
        <request_example/>
        <requires_acl_authorization>true</requires_acl_authorization>
        <requires_authentication>true</requires_authentication>
        <requires_snc_internal_role>true</requires_snc_internal_role>
        <short_description/>
        <sys_class_name>sys_ws_operation</sys_class_name>
        <sys_created_by>e663988</sys_created_by>
        <sys_created_on>2021-02-10 22:53:11</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>13215f3c1b1a68545e72ebd5604bcbf2</sys_id>
        <sys_mod_count>82</sys_mod_count>
        <sys_name>POST_NOTIFCATION</sys_name>
        <sys_package display_value="GTS_OAR_Ansible_Tower" source="x_ibmss_gts_oar_at">0cf0becddb143300c66571198c961991</sys_package>
        <sys_policy>protected</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="GTS_OAR_Ansible_Tower">0cf0becddb143300c66571198c961991</sys_scope>
        <sys_update_name>sys_ws_operation_13215f3c1b1a68545e72ebd5604bcbf2</sys_update_name>
        <sys_updated_by>e663988</sys_updated_by>
        <sys_updated_on>2021-04-15 16:59:21</sys_updated_on>
        <web_service_definition display_value="Ansible Tower Job Notifications">29a0d7341b1a68545e72ebd5604bcb24</web_service_definition>
        <web_service_version/>
    </sys_ws_operation>
</record_update>
